@model JobHub.DTOs.UserAccount.UserDataDto

<style>
    /* Base Styles */
    :root {
        --primary-color: #3498db;
        --primary-dark: #2980b9;
        --secondary-color: #2ecc71;
        --dark-color: #2c3e50;
        --light-color: #ecf0f1;
        --gray-color: #95a5a6;
        --light-gray: #e0e0e0;
        --danger-color: #e74c3c;
        --warning-color: #f39c12;
        --success-color: #2ecc71;
        --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }

    .profile-page {
        padding: 40px 0;
        background-color: #f5f7fa;
        min-height: 100vh;
    }

    .container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    /* Profile Header */
    .profile-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

        .profile-header h1 {
            font-size: 2rem;
            color: var(--dark-color);
        }

    .btn-edit {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
    }

        .btn-edit:hover {
            background-color: var(--primary-dark);
        }

    /* Profile Container */
    .profile-container {
        background: white;
        border-radius: 10px;
        box-shadow: var(--box-shadow);
        padding: 30px;
    }

    /* Profile Sections */
    .profile-section {
        margin-bottom: 40px;
        border-bottom: 1px solid var(--light-gray);
        padding-bottom: 30px;
    }

        .profile-section:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .section-header h2 {
            font-size: 1.4rem;
            color: var(--dark-color);
        }

    .section-actions button {
        background: none;
        border: none;
        color: var(--primary-color);
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        padding: 5px 10px;
        border-radius: 5px;
    }

        .section-actions button:hover {
            background-color: rgba(52, 152, 219, 0.1);
        }

    /* Profile Image */
    .profile-image-container {
        display: flex;
        justify-content: center;
        margin-bottom: 30px;
    }

    .profile-image-wrapper {
        text-align: center;
    }

    #profileImagePreview {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 15px;
        border: 3px solid var(--light-color);
    }

    .profile-image-placeholder {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        background-color: var(--light-color);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        color: var(--primary-color);
        font-size: 3rem;
        border: 3px solid var(--light-color);
    }

    .btn-change-image {
        display: inline-block;
        background-color: var(--primary-color);
        color: white;
        padding: 8px 15px;
        border-radius: 5px;
        cursor: pointer;
        transition: var(--transition);
    }

        .btn-change-image:hover {
            background-color: var(--primary-dark);
        }

    /* Form Grid */
    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark-color);
        }

        .form-group input[type="text"],
        .form-group input[type="tel"],
        .form-group input[type="date"],
        .form-group input[type="number"],
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid var(--light-gray);
            border-radius: 5px;
            font-size: 1rem;
        }

        .form-group textarea {
            min-height: 100px;
            resize: vertical;
        }

    .view-field {
        padding: 10px 0;
        color: var(--dark-color);
    }

    /* Resume Section */
    .resume-container {
        display: flex;
        align-items: center;
        gap: 20px;
        padding: 20px;
        border: 1px dashed var(--light-gray);
        border-radius: 8px;
    }

        .resume-container i {
            color: var(--danger-color);
        }

    .resume-info {
        flex-grow: 1;
    }

        .resume-info h4 {
            margin-bottom: 10px;
            color: var(--dark-color);
        }

    .btn-download {
        display: inline-block;
        background-color: var(--primary-color);
        color: white;
        padding: 8px 15px;
        border-radius: 5px;
        text-decoration: none;
        transition: var(--transition);
    }

        .btn-download:hover {
            background-color: var(--primary-dark);
        }

    .file-upload-container {
        margin-top: 20px;
    }

        .file-upload-container input[type="file"] {
            display: none;
        }

    .file-upload-label {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 30px;
        border: 2px dashed var(--light-gray);
        border-radius: 8px;
        cursor: pointer;
        transition: var(--transition);
        text-align: center;
    }

        .file-upload-label:hover {
            border-color: var(--primary-color);
        }

        .file-upload-label i {
            font-size: 2rem;
            color: var(--primary-color);
            margin-bottom: 10px;
        }

        .file-upload-label span {
            font-weight: 600;
            color: var(--dark-color);
            margin-bottom: 5px;
        }

        .file-upload-label p {
            color: var(--gray-color);
            font-size: 0.9rem;
        }

    /* Education List */
    .education-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .education-item {
        background-color: #f9f9f9;
        border-radius: 8px;
        padding: 20px;
        position: relative;
    }

    .education-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

        .education-header h3 {
            font-size: 1.2rem;
            color: var(--dark-color);
            margin-bottom: 5px;
        }

    .education-actions {
        display: flex;
        gap: 10px;
    }

        .education-actions button {
            background: none;
            border: none;
            color: var(--primary-color);
            font-size: 0.8rem;
            cursor: pointer;
            transition: var(--transition);
        }

            .education-actions button:hover {
                text-decoration: underline;
            }

    .field-of-study {
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 5px;
    }

    .education-dates {
        color: var(--gray-color);
        font-size: 0.9rem;
        margin-bottom: 5px;
    }

    .gpa {
        color: var(--dark-color);
        font-size: 0.9rem;
        margin-bottom: 10px;
    }

    .education-description {
        color: #555;
        font-size: 0.9rem;
        line-height: 1.6;
    }

    .no-education {
        color: var(--gray-color);
        font-style: italic;
    }

    /* Experience List */
    .experience-list {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .experience-item {
        background-color: #f9f9f9;
        border-radius: 8px;
        padding: 20px;
        position: relative;
    }

    .experience-header {
        margin-bottom: 10px;
    }

        .experience-header h3 {
            font-size: 1.2rem;
            color: var(--dark-color);
            margin-bottom: 5px;
        }

    .company-name {
        color: var(--gray-color);
        font-size: 0.9rem;
        margin-bottom: 5px;
    }

    .experience-actions {
        position: absolute;
        top: 20px;
        right: 20px;
        display: flex;
        gap: 10px;
    }

        .experience-actions button {
            background: none;
            border: none;
            color: var(--primary-color);
            font-size: 0.8rem;
            cursor: pointer;
            transition: var(--transition);
        }

            .experience-actions button:hover {
                text-decoration: underline;
            }

    .experience-location {
        color: var(--gray-color);
        font-size: 0.9rem;
        margin-bottom: 5px;
    }

    .experience-dates {
        color: var(--gray-color);
        font-size: 0.9rem;
        margin-bottom: 10px;
    }

    .experience-description {
        color: #555;
        font-size: 0.9rem;
        line-height: 1.6;
    }

    .no-experience {
        color: var(--gray-color);
        font-style: italic;
    }

    /* Skills List */
    .skills-list {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }

    .skill-item {
        background-color: #f9f9f9;
        border-radius: 8px;
        padding: 15px;
        width: calc(50% - 8px);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .skill-info {
        flex-grow: 1;
    }

    .skill-name {
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 5px;
        display: block;
    }

    .skill-level {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .dot {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        background-color: var(--light-gray);
    }

        .dot.filled {
            background-color: var(--primary-color);
        }

    .level-text {
        font-size: 0.8rem;
        color: var(--gray-color);
        margin-left: 5px;
    }

    .skill-actions {
        display: flex;
        gap: 10px;
    }

        .skill-actions button {
            background: none;
            border: none;
            color: var(--primary-color);
            font-size: 0.8rem;
            cursor: pointer;
            transition: var(--transition);
        }

            .skill-actions button:hover {
                text-decoration: underline;
            }

    .no-skills {
        color: var(--gray-color);
        font-style: italic;
    }

    /* Languages List */
    .languages-list {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
    }

    .language-item {
        background-color: #f9f9f9;
        border-radius: 8px;
        padding: 15px;
        width: calc(50% - 8px);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .language-info {
        flex-grow: 1;
    }

    .language-name {
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 5px;
        display: block;
    }

    .language-level {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .language-actions {
        display: flex;
        gap: 10px;
    }

        .language-actions button {
            background: none;
            border: none;
            color: var(--primary-color);
            font-size: 0.8rem;
            cursor: pointer;
            transition: var(--transition);
        }

            .language-actions button:hover {
                text-decoration: underline;
            }

    .no-languages {
        color: var(--gray-color);
        font-style: italic;
    }

    /* Form Actions */
    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 15px;
        margin-top: 30px;
    }

    .btn-cancel {
        background-color: white;
        color: var(--dark-color);
        border: 1px solid var(--light-gray);
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: var(--transition);
    }

        .btn-cancel:hover {
            background-color: var(--light-gray);
        }

    .btn-save {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: var(--transition);
    }

        .btn-save:hover {
            background-color: var(--primary-dark);
        }

    /* Edit Mode */
    .edit-mode {
        display: none;
    }

    .editing .view-mode {
        display: none;
    }

    .editing .edit-mode {
        display: block;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        overflow: auto;
    }

    .modal-content {
        background-color: white;
        margin: 5% auto;
        padding: 30px;
        border-radius: 8px;
        width: 90%;
        max-width: 600px;
        position: relative;
    }

    .close-modal {
        position: absolute;
        top: 15px;
        right: 15px;
        font-size: 1.5rem;
        color: var(--gray-color);
        cursor: pointer;
    }

        .close-modal:hover {
            color: var(--dark-color);
        }

    .form-row {
        display: flex;
        gap: 20px;
    }

        .form-row .form-group {
            flex: 1;
        }

    .checkbox-container {
        display: block;
        position: relative;
        padding-left: 25px;
        margin-top: 10px;
        cursor: pointer;
        font-size: 0.9rem;
        color: var(--gray-color);
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

        .checkbox-container input {
            position: absolute;
            opacity: 0;
            cursor: pointer;
            height: 0;
            width: 0;
        }

    .checkmark {
        position: absolute;
        top: 0;
        left: 0;
        height: 18px;
        width: 18px;
        background-color: white;
        border: 1px solid var(--light-gray);
        border-radius: 3px;
    }

    .checkbox-container:hover input ~ .checkmark {
        background-color: #f1f1f1;
    }

    .checkbox-container input:checked ~ .checkmark {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
    }

    .checkbox-container input:checked ~ .checkmark:after {
        display: block;
    }

    .checkbox-container .checkmark:after {
        left: 6px;
        top: 2px;
        width: 5px;
        height: 10px;
        border: solid white;
        border-width: 0 2px 2px 0;
        -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
        transform: rotate(45deg);
    }

    /* Skill Level Selector */
    .skill-level-selector {
        margin-top: 10px;
    }

    .level-options {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .level-option {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        border: 1px solid var(--light-gray);
        border-radius: 5px;
        cursor: pointer;
        transition: var(--transition);
    }

        .level-option:hover {
            border-color: var(--primary-color);
        }

        .level-option.selected {
            border-color: var(--primary-color);
            background-color: rgba(52, 152, 219, 0.1);
        }

    .dots {
        display: flex;
        gap: 3px;
    }

    /* Responsive Design */
    media (max-width: 768px) {
        .form-grid

    {
        grid-template-columns: 1fr;
    }

    .skill-item, .language-item {
        width: 100%;
    }

    .form-row {
        flex-direction: column;
        gap: 0;
    }

    .modal-content {
        margin: 10% auto;
        width: 95%;
        padding: 20px;
    }

    }

    media (max-width: 576px) {
        .profile-header

    {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }

    .education-actions, .experience-actions {
        position: static;
        margin-top: 10px;
    }

    .education-item, .experience-item {
        padding: 15px;
    }

    }
</style>
<div class="profile-page">
    <div class="container">
        <div class="profile-header">
            <h1>My Profile</h1>
            <button id="toggleEdit" class="btn-edit">Edit Profile</button>
        </div>

        <form id="profileForm" method="post" enctype="multipart/form-data" class="profile-container">
            <!-- Personal Information Section -->
            <div class="profile-section">
                <div class="section-header">
                    <h2>Personal Information</h2>
                    <div class="section-actions">
                        <button type="button" class="btn-edit-section" data-section="personal">Edit</button>
                    </div>
                </div>

                <div class="section-content">
                    <div class="profile-image-container">
                        <div class="profile-image-wrapper">
                            @if (!string.IsNullOrEmpty(Model.PersonalImageBase64))
                            {
                                <img id="profileImagePreview" src="data:@Model.PersonalImageType;base64,@Model.PersonalImageBase64" alt="Profile Image">
                            }
                            else
                            {
                                <div id="profileImagePreview" class="profile-image-placeholder">
                                    <i class="fas fa-user"></i>
                                </div>
                            }
                            <input type="file" id="personalImageUpload" name="PersonalImage" accept="image/*" style="display: none;">
                            <label for="personalImageUpload" class="btn-change-image">Change Photo</label>
                        </div>
                    </div>

                    <div class="form-grid">
                        <div class="form-group view-mode">
                            <label>Full Name</label>
                            <div class="view-field">@Model.FullName</div>
                        </div>
                        <div class="form-group edit-mode">
                            <label for="fullName">Full Name</label>
                            <input type="text" id="fullName" name="FullName" value="@Model.FullName">
                        </div>

                        <div class="form-group view-mode">
                            <label>Headline</label>
                            <div class="view-field">@Model.HeadLine</div>
                        </div>
                        <div class="form-group edit-mode">
                            <label for="headLine">Headline</label>
                            <input type="text" id="headLine" name="HeadLine" value="@Model.HeadLine">
                        </div>

                        <div class="form-group view-mode">
                            <label>Date of Birth</label>
                            <div class="view-field">@Model.DayOfBirth</div>
                        </div>
                        <div class="form-group edit-mode">
                            <label for="dayOfBirth">Date of Birth</label>
                            <input type="date" id="dayOfBirth" name="DayOfBirth" value="@Model.DayOfBirth">
                        </div>

                        <div class="form-group view-mode">
                            <label>Phone Number</label>
                            <div class="view-field">@(Model.PhoneNumber ?? "Not provided")</div>
                        </div>
                        <div class="form-group edit-mode">
                            <label for="phoneNumber">Phone Number</label>
                            <input type="tel" id="phoneNumber" name="PhoneNumber" value="@Model.PhoneNumber">
                        </div>

                        <div class="form-group view-mode">
                            <label>Address</label>
                            <div class="view-field">@(Model.Address ?? "Not provided")</div>
                        </div>
                        <div class="form-group edit-mode">
                            <label for="address">Address</label>
                            <input type="text" id="address" name="Address" value="@Model.Address">
                        </div>

                        <div class="form-group view-mode">
                            <label>About Me</label>
                            <div class="view-field">@(Model.Description ?? "Not provided")</div>
                        </div>
                        <div class="form-group edit-mode">
                            <label for="description">About Me</label>
                            <textarea id="description" name="Description">@Model.Description</textarea>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Resume Section -->
            <div class="profile-section">
                <div class="section-header">
                    <h2>Resume</h2>
                    <div class="section-actions">
                        <button type="button" class="btn-edit-section" data-section="resume">Edit</button>
                    </div>
                </div>

                <div class="section-content">
                    @if (!string.IsNullOrEmpty(Model.ResumeBase64))
                    {
                        <div class="resume-container view-mode">
                            <i class="fas fa-file-pdf fa-3x"></i>
                            <div class="resume-info">
                                <h4>@Model.ResumeName</h4>
                                <a href="data:@Model.ResumeType;base64,@Model.ResumeBase64" download="@Model.ResumeName" class="btn-download">Download Resume</a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="resume-container view-mode">
                            <p>No resume uploaded</p>
                        </div>
                    }

                    <div class="edit-mode">
                        <div class="file-upload-container">
                            <input type="file" id="resumeUpload" name="ResumeFile" accept=".pdf,.doc,.docx,.txt">
                            <label for="resumeUpload" class="file-upload-label">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <span>Upload New Resume</span>
                                <p>PDF, DOC, DOCX, or TXT files</p>
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Education Section -->
            <div class="profile-section">
                <div class="section-header">
                    <h2>Education</h2>
                    <div class="section-actions">
                        <button type="button" class="btn-add-education">Add Education</button>
                    </div>
                </div>

                <div class="section-content">
                    @if (Model.Education != null && Model.Education.Count > 0)
                    {
                        <div class="education-list">
                            @foreach (var edu in Model.Education)
                            {
                                <div class="education-item">
                                    <div class="education-header">
                                        <h3>@edu.CollegeName</h3>
                                        <div class="education-actions">
                                            <button type="button" class="btn-edit-education" data-id="@edu.CollegeName">Edit</button>
                                            <button type="button" class="btn-delete-education" data-id="@edu.CollegeName">Delete</button>
                                        </div>
                                    </div>
                                    <p class="field-of-study">@edu.FieldOfStudy</p>
                                    <p class="education-dates">
                                        @edu.StartDate.ToString("MMM yyyy") -
                                        @(edu.EndDate.Year == 1 ? "Present" : edu.EndDate.ToString("MMM yyyy"))
                                    </p>
                                    <p class="gpa">GPA: @edu.Gpa</p>
                                    @if (!string.IsNullOrEmpty(edu.Description))
                                    {
                                        <div class="education-description">
                                            <p>@edu.Description</p>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="no-education">No education information added</p>
                    }
                </div>
            </div>

            <!-- Experience Section -->
            <div class="profile-section">
                <div class="section-header">
                    <h2>Experience</h2>
                    <div class="section-actions">
                        <button type="button" class="btn-add-experience">Add Experience</button>
                    </div>
                </div>

                <div class="section-content">
                    @if (Model.Experiences != null && Model.Experiences.Count > 0)
                    {
                        <div class="experience-list">
                            @foreach (var exp in Model.Experiences)
                            {
                                <div class="experience-item">
                                    <div class="experience-header">
                                        <h3>@exp.Title</h3>
                                        <p class="company-name">@exp.CompanyName</p>
                                        <div class="experience-actions">
                                            <button type="button" class="btn-edit-experience" data-id="@exp.Title">Edit</button>
                                            <button type="button" class="btn-delete-experience" data-id="@exp.Title">Delete</button>
                                        </div>
                                    </div>
                                    <p class="experience-location">@exp.Location</p>
                                    <p class="experience-dates">
                                        @exp.StartDate.ToString("MMM yyyy") -
                                        @(exp.EndDate.Year == 1 ? "Present" : exp.EndDate.ToString("MMM yyyy"))
                                    </p>
                                    @if (!string.IsNullOrEmpty(exp.Description))
                                    {
                                        <div class="experience-description">
                                            <p>@exp.Description</p>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="no-experience">No experience information added</p>
                    }
                </div>
            </div>

            <!-- Skills Section -->
            <div class="profile-section">
                <div class="section-header">
                    <h2>Skills</h2>
                    <div class="section-actions">
                        <button type="button" class="btn-add-skill">Add Skill</button>
                    </div>
                </div>

                <div class="section-content">
                    @if (Model.Skills != null && Model.Skills.Count > 0)
                    {
                        <div class="skills-list">
                            @foreach (var skill in Model.Skills)
                            {
                                <div class="skill-item">
                                    <div class="skill-info">
                                        <span class="skill-name">@skill.SkillName</span>
                                        <div class="skill-level">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <span class="dot @(i <= GetSkillLevelNumber(skill.SkillLevel) ? "filled" : "")"></span>
                                            }
                                            <span class="level-text">@skill.SkillLevel</span>
                                        </div>
                                    </div>
                                    <div class="skill-actions">
                                        <button type="button" class="btn-edit-skill" data-id="@skill.SkillName">Edit</button>
                                        <button type="button" class="btn-delete-skill" data-id="@skill.SkillName">Delete</button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="no-skills">No skills added</p>
                    }
                </div>
            </div>

            <!-- Languages Section -->
            <div class="profile-section">
                <div class="section-header">
                    <h2>Languages</h2>
                    <div class="section-actions">
                        <button type="button" class="btn-add-language">Add Language</button>
                    </div>
                </div>

                <div class="section-content">
                    @if (Model.Languages != null && Model.Languages.Count > 0)
                    {
                        <div class="languages-list">
                            @foreach (var lang in Model.Languages)
                            {
                                <div class="language-item">
                                    <div class="language-info">
                                        <span class="language-name">@lang.LanguageName</span>
                                        <div class="language-level">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <span class="dot @(i <= GetLanguageLevelNumber(lang.LanguageLevel) ? "filled" : "")"></span>
                                            }
                                            <span class="level-text">@lang.LanguageLevel</span>
                                        </div>
                                    </div>
                                    <div class="language-actions">
                                        <button type="button" class="btn-edit-language" data-id="@lang.LanguageName">Edit</button>
                                        <button type="button" class="btn-delete-language" data-id="@lang.LanguageName">Delete</button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="no-languages">No languages added</p>
                    }
                </div>
            </div>

            <!-- Form Actions -->
            <div class="form-actions edit-mode">
                <button type="button" class="btn-cancel">Cancel</button>
                <button type="submit" class="btn-save">Save Changes</button>
            </div>
        </form>
    </div>
</div>

<!-- Education Modal -->
<div class="modal" id="educationModal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2 id="educationModalTitle">Add Education</h2>
        <form id="educationForm">
            <input type="hidden" id="educationId">
            <div class="form-group">
                <label for="eduCollegeName">College/University</label>
                <input type="text" id="eduCollegeName" required>
            </div>
            <div class="form-group">
                <label for="eduFieldOfStudy">Field of Study</label>
                <input type="text" id="eduFieldOfStudy" required>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="eduStartDate">Start Date</label>
                    <input type="date" id="eduStartDate" required>
                </div>
                <div class="form-group">
                    <label for="eduEndDate">End Date</label>
                    <input type="date" id="eduEndDate">
                    <label class="checkbox-container">
                        <input type="checkbox" id="eduCurrentlyStudying"> Currently studying here
                        <span class="checkmark"></span>
                    </label>
                </div>
            </div>
            <div class="form-group">
                <label for="eduGpa">GPA</label>
                <input type="number" id="eduGpa" step="0.1" min="0" max="4">
            </div>
            <div class="form-group">
                <label for="eduDescription">Description</label>
                <textarea id="eduDescription"></textarea>
            </div>
            <div class="form-actions">
                <button type="button" class="btn-cancel">Cancel</button>
                <button type="submit" class="btn-save">Save</button>
            </div>
        </form>
    </div>
</div>

<!-- Experience Modal -->
<div class="modal" id="experienceModal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2 id="experienceModalTitle">Add Experience</h2>
        <form id="experienceForm">
            <input type="hidden" id="experienceId">
            <div class="form-group">
                <label for="expTitle">Title</label>
                <input type="text" id="expTitle" required>
            </div>
            <div class="form-group">
                <label for="expCompanyName">Company</label>
                <input type="text" id="expCompanyName" required>
            </div>
            <div class="form-group">
                <label for="expLocation">Location</label>
                <input type="text" id="expLocation">
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="expStartDate">Start Date</label>
                    <input type="date" id="expStartDate" required>
                </div>
                <div class="form-group">
                    <label for="expEndDate">End Date</label>
                    <input type="date" id="expEndDate">
                    <label class="checkbox-container">
                        <input type="checkbox" id="expCurrentlyWorking"> Currently working here
                        <span class="checkmark"></span>
                    </label>
                </div>
            </div>
            <div class="form-group">
                <label for="expDescription">Description</label>
                <textarea id="expDescription"></textarea>
            </div>
            <div class="form-actions">
                <button type="button" class="btn-cancel">Cancel</button>
                <button type="submit" class="btn-save">Save</button>
            </div>
        </form>
    </div>
</div>

<!-- Skill Modal -->
<div class="modal" id="skillModal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2 id="skillModalTitle">Add Skill</h2>
        <form id="skillForm">
            <input type="hidden" id="skillId">
            <div class="form-group">
                <label for="skillName">Skill Name</label>
                <input type="text" id="skillName" required>
            </div>
            <div class="form-group">
                <label>Skill Level</label>
                <div class="skill-level-selector">
                    <div class="level-options">
                        <div class="level-option" data-level="Beginner">
                            <span class="dots">
                                <span class="dot filled"></span>
                                <span class="dot"></span>
                                <span class="dot"></span>
                                <span class="dot"></span>
                                <span class="dot"></span>
                            </span>
                            <span>Beginner</span>
                        </div>
                        <div class="level-option" data-level="Intermediate">
                            <span class="dots">
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot"></span>
                                <span class="dot"></span>
                            </span>
                            <span>Intermediate</span>
                        </div>
                        <div class="level-option" data-level="Advanced">
                            <span class="dots">
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                            </span>
                            <span>Advanced</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-actions">
                <button type="button" class="btn-cancel">Cancel</button>
                <button type="submit" class="btn-save">Save</button>
            </div>
        </form>
    </div>
</div>

<!-- Language Modal -->
<div class="modal" id="languageModal">
    <div class="modal-content">
        <span class="close-modal">&times;</span>
        <h2 id="languageModalTitle">Add Language</h2>
        <form id="languageForm">
            <input type="hidden" id="languageId">
            <div class="form-group">
                <label for="languageName">Language</label>
                <input type="text" id="languageName" required>
            </div>
            <div class="form-group">
                <label>Proficiency Level</label>
                <div class="skill-level-selector">
                    <div class="level-options">
                        <div class="level-option" data-level="Basic">
                            <span class="dots">
                                <span class="dot filled"></span>
                                <span class="dot"></span>
                                <span class="dot"></span>
                                <span class="dot"></span>
                                <span class="dot"></span>
                            </span>
                            <span>Basic</span>
                        </div>
                        <div class="level-option" data-level="Conversational">
                            <span class="dots">
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot"></span>
                                <span class="dot"></span>
                            </span>
                            <span>Conversational</span>
                        </div>
                        <div class="level-option" data-level="Fluent">
                            <span class="dots">
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot"></span>
                            </span>
                            <span>Fluent</span>
                        </div>
                        <div class="level-option" data-level="Native">
                            <span class="dots">
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                                <span class="dot filled"></span>
                            </span>
                            <span>Native</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-actions">
                <button type="button" class="btn-cancel">Cancel</button>
                <button type="submit" class="btn-save">Save</button>
            </div>
        </form>
    </div>
</div>

@functions {
    private int GetSkillLevelNumber(string level)
    {
        return level switch
        {
            "Beginner" => 1,
            "Intermediate" => 3,
            "Advanced" => 5,
            _ => 0
        };
    }

    private int GetLanguageLevelNumber(string level)
    {
        return level switch
        {
            "Basic" => 1,
            "Conversational" => 3,
            "Fluent" => 4,
            "Native" => 5,
            _ => 0
        };
    }
}



<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Global edit mode toggle
        const toggleEditBtn = document.getElementById('toggleEdit');
        const profileForm = document.getElementById('profileForm');

        toggleEditBtn.addEventListener('click', function() {
            profileForm.classList.toggle('editing');
            this.textContent = profileForm.classList.contains('editing') ? 'Cancel' : 'Edit Profile';
        });

        // Section edit buttons
        document.querySelectorAll('.btn-edit-section').forEach(btn => {
            btn.addEventListener('click', function() {
                const section = this.dataset.section;
                document.querySelectorAll(`.${section}-section .view-mode`).forEach(el => el.style.display = 'none');
                document.querySelectorAll(`.${section}-section .edit-mode`).forEach(el => el.style.display = 'block');
            });
        });

        // Form cancel button
        document.querySelector('.btn-cancel').addEventListener('click', function() {
            profileForm.classList.remove('editing');
            toggleEditBtn.textContent = 'Edit Profile';
        });

        // Profile image upload
        const profileImageUpload = document.getElementById('personalImageUpload');
        const profileImagePreview = document.getElementById('profileImagePreview');

        profileImageUpload.addEventListener('change', function() {
            if (this.files && this.files[0]) {
                const reader = new FileReader();

                reader.onload = function(e) {
                    if (profileImagePreview.tagName === 'IMG') {
                        profileImagePreview.src = e.target.result;
                    } else {
                        // Replace placeholder with image
                        const img = document.createElement('img');
                        img.id = 'profileImagePreview';
                        img.src = e.target.result;
                        img.alt = 'Profile Image';
                        img.style.width = '150px';
                        img.style.height = '150px';
                        img.style.borderRadius = '50%';
                        img.style.objectFit = 'cover';
                        img.style.marginBottom = '15px';
                        img.style.border = '3px solid var(--light-color)';
                        profileImagePreview.replaceWith(img);
                    }
                }

                reader.readAsDataURL(this.files[0]);
            }
        });

        // Modal handling
        const modals = {
            education: document.getElementById('educationModal'),
            experience: document.getElementById('experienceModal'),
            skill: document.getElementById('skillModal'),
            language: document.getElementById('languageModal')
        };

        // Open modals
        document.querySelector('.btn-add-education').addEventListener('click', () => openModal('education'));
        document.querySelector('.btn-add-experience').addEventListener('click', () => openModal('experience'));
        document.querySelector('.btn-add-skill').addEventListener('click', () => openModal('skill'));
        document.querySelector('.btn-add-language').addEventListener('click', () => openModal('language'));

        // Close modals
        document.querySelectorAll('.close-modal').forEach(btn => {
            btn.addEventListener('click', () => {
                Object.values(modals).forEach(modal => modal.style.display = 'none');
            });
        });

        // Close when clicking outside
        window.addEventListener('click', function(event) {
            Object.values(modals).forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });

        function openModal(type) {
            const modal = modals[type];
            document.getElementById(`${type}ModalTitle`).textContent = `Add ${type.charAt(0).toUpperCase() + type.slice(1)}`;
            modal.style.display = 'block';

            // Reset form
            document.getElementById(`${type}Form`).reset();
            document.getElementById(`${type}Id`).value = '';

            // Clear selected classes
            if (type === 'skill' || type === 'language') {
                document.querySelectorAll(`#${type}Modal .level-option`).forEach(opt => {
                    opt.classList.remove('selected');
                });
            }
        }

        // Skill level selection
        document.querySelectorAll('#skillModal .level-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('#skillModal .level-option').forEach(opt => {
                    opt.classList.remove('selected');
                });
                this.classList.add('selected');
            });
        });

        // Language level selection
        document.querySelectorAll('#languageModal .level-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('#languageModal .level-option').forEach(opt => {
                    opt.classList.remove('selected');
                });
                this.classList.add('selected');
            });
        });

        // Currently studying/working checkboxes
        document.getElementById('eduCurrentlyStudying').addEventListener('change', function() {
            document.getElementById('eduEndDate').disabled = this.checked;
        });

        document.getElementById('expCurrentlyWorking').addEventListener('change', function() {
            document.getElementById('expEndDate').disabled = this.checked;
        });

        // Form submissions (would be handled by your backend)
        document.getElementById('educationForm').addEventListener('submit', function(e) {
            e.preventDefault();
            alert('Education added/updated (would be saved to backend in real implementation)');
            modals.education.style.display = 'none';
        });

        document.getElementById('experienceForm').addEventListener('submit', function(e) {
            e.preventDefault();
            alert('Experience added/updated (would be saved to backend in real implementation)');
            modals.experience.style.display = 'none';
        });

        document.getElementById('skillForm').addEventListener('submit', function(e) {
            e.preventDefault();
            alert('Skill added/updated (would be saved to backend in real implementation)');
            modals.skill.style.display = 'none';
        });

        document.getElementById('languageForm').addEventListener('submit', function(e) {
            e.preventDefault();
            alert('Language added/updated (would be saved to backend in real implementation)');
            modals.language.style.display = 'none';
        });

        // Edit buttons for existing items (would populate the modal with existing data)
        document.querySelectorAll('.btn-edit-education').forEach(btn => {
            btn.addEventListener('click', function() {
                const educationId = this.dataset.id;
                // In a real app, you would fetch the education data and populate the form
                document.getElementById('educationModalTitle').textContent = 'Edit Education';
                document.getElementById('educationId').value = educationId;
                modals.education.style.display = 'block';
            });
        });

        document.querySelectorAll('.btn-edit-experience').forEach(btn => {
            btn.addEventListener('click', function() {
                const experienceId = this.dataset.id;
                // In a real app, you would fetch the experience data and populate the form
                document.getElementById('experienceModalTitle').textContent = 'Edit Experience';
                document.getElementById('experienceId').value = experienceId;
                modals.experience.style.display = 'block';
            });
        });

        document.querySelectorAll('.btn-edit-skill').forEach(btn => {
            btn.addEventListener('click', function() {
                const skillId = this.dataset.id;
                // In a real app, you would fetch the skill data and populate the form
                document.getElementById('skillModalTitle').textContent = 'Edit Skill';
                document.getElementById('skillId').value = skillId;
                modals.skill.style.display = 'block';
            });
        });

        document.querySelectorAll('.btn-edit-language').forEach(btn => {
            btn.addEventListener('click', function() {
                const languageId = this.dataset.id;
                // In a real app, you would fetch the language data and populate the form
                document.getElementById('languageModalTitle').textContent = 'Edit Language';
                document.getElementById('languageId').value = languageId;
                modals.language.style.display = 'block';
            });
        });

        // Delete buttons
        document.querySelectorAll('.btn-delete-education').forEach(btn => {
            btn.addEventListener('click', function() {
                if (confirm('Are you sure you want to delete this education entry?')) {
                    // In a real app, you would send a delete request to the backend
                    this.closest('.education-item').remove();
                }
            });
        });

        document.querySelectorAll('.btn-delete-experience').forEach(btn => {
            btn.addEventListener('click', function() {
                if (confirm('Are you sure you want to delete this experience entry?')) {
                    // In a real app, you would send a delete request to the backend
                    this.closest('.experience-item').remove();
                }
            });
        });

        document.querySelectorAll('.btn-delete-skill').forEach(btn => {
            btn.addEventListener('click', function() {
                if (confirm('Are you sure you want to delete this skill?')) {
                    // In a real app, you would send a delete request to the backend
                    this.closest('.skill-item').remove();
                }
            });
        });

        document.querySelectorAll('.btn-delete-language').forEach(btn => {
            btn.addEventListener('click', function() {
                if (confirm('Are you sure you want to delete this language?')) {
                    // In a real app, you would send a delete request to the backend
                    this.closest('.language-item').remove();
                }
            });
        });
    });
</script>