@model JobHub.DTOs.Ai.ResumeMatchDto
@{
    ViewData["Title"] = "Your Job Matches";
}

<div class="resume-upload-page">
    <div class="container">
        <div class="results-section">
            <h2>Your Best Job Matches</h2>
            <p class="match-summary">Based on your resume, we found <strong>@Model.MatchingJobs.Count</strong> jobs that match your skills and experience</p>

            <div class="match-stats">
                <div class="stat-card">
                    <i class="fas fa-star"></i>
                    <div>
                        <span class="stat-value">@Model.MatchScore%</span>
                        <span class="stat-label">Overall Match</span>
                    </div>
                </div>
                <div class="stat-card">
                    <i class="fas fa-code"></i>
                    <div>
                        <span class="stat-value">@Model.SkillsMatched</span>
                        <span class="stat-label">Skills Matched</span>
                    </div>
                </div>
                <div class="stat-card">
                    <i class="fas fa-briefcase"></i>
                    <div>
                        <span class="stat-value">@Model.ExperienceMatched</span>
                        <span class="stat-label">Experience Level</span>
                    </div>
                </div>
            </div>

            <div class="job-matches">
                @foreach (var jobMatch in Model.MatchingJobs)
                {
                    var job = jobMatch.JobPost;
                    <div class="match-card">
                        <div class="match-header">
                            <div class="company-logo">
                                @if (!string.IsNullOrEmpty(job.ImageCompanyBase64))
                                {
                                    <img src="data:@job.ImageCompanyType;base64,@job.ImageCompanyBase64" alt="@job.companyName logo">
                                }
                                else
                                {
                                    <span>@job.companyName?.Substring(0, 1)</span>
                                }
                            </div>
                            <div class="match-info">
                                <h3>@job.Title</h3>
                                <p class="company">@job.companyName</p>
                                <div class="match-meta">
                                    <span><i class="fas fa-map-marker-alt"></i> @job.Location</span>
                                    <span><i class="fas fa-calendar-alt"></i> @job.PostedAt.ToShortDateString()</span>
                                </div>
                            </div>
                            <div class="match-score">
                                <div class="score-circle" data-score="@jobMatch.MatchPercentage">
                                    <svg class="circle-chart" viewBox="0 0 36 36">
                                        <path class="circle-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                        <path class="circle-fill" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                    </svg>
                                    <span class="score-value">@jobMatch.MatchPercentage%</span>
                                </div>
                                <span class="score-label">Match</span>
                            </div>
                        </div>
                        <div class="match-details">
                            <div class="skills-match">
                                <h4>Matched Skills</h4>
                                <div class="matched-skills">
                                    @foreach (var skill in jobMatch.MatchedSkills.Take(5))
                                    {
                                        <span class="skill-tag">@skill</span>
                                    }
                                    @if (jobMatch.MatchedSkills.Count > 5)
                                    {
                                        <span class="skill-tag">+@(jobMatch.MatchedSkills.Count - 5)</span>
                                    }
                                </div>
                            </div>
                            <div class="match-actions">
                                <a href="@Url.Action("Details", "Jobs", new { id = job.Id })" class="btn-view"><i class="fas fa-eye"></i> View Job</a>
                                <button class="btn-save" data-job-id="@job.Id">
                                    <i class="far fa-bookmark"></i> Save
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="improve-section">
                <h3>Want to Improve Your Matches?</h3>
                <div class="improve-card">
                    <i class="fas fa-magic"></i>
                    <div>
                        <h4>AI Resume Builder</h4>
                        <p>Let our AI help you optimize your resume for better job matches</p>
                        <button class="btn-improve">Optimize My Resume</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Animate match scores
            document.querySelectorAll('.score-circle').forEach(circle => {
                const score = parseInt(circle.dataset.score);
                const circumference = 2 * Math.PI * 15.9155;
                const offset = circumference - (score / 100) * circumference;

                const fill = circle.querySelector('.circle-fill');
                fill.style.strokeDasharray = circumference;
                fill.style.strokeDashoffset = offset;

                // Set color based on score
                if (score < 40) {
                    fill.style.stroke = '#e74c3c'; // danger color
                } else if (score < 70) {
                    fill.style.stroke = '#f39c12'; // warning color
                } else {
                    fill.style.stroke = '#2ecc71'; // success color
                }
            });

            // Save job functionality
            document.querySelectorAll('.btn-save').forEach(btn => {
                btn.addEventListener('click', function() {
                    const jobId = this.getAttribute('data-job-id');
                    const isSaved = this.classList.contains('saved');

                    fetch(isSaved ? '/Jobs/Unsave/' + jobId : '/Jobs/Save/' + jobId, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                    .then(response => {
                        if (response.ok) {
                            this.classList.toggle('saved');
                            const icon = this.querySelector('i');
                            if (this.classList.contains('saved')) {
                                icon.classList.remove('far');
                                icon.classList.add('fas');
                                icon.style.color = '#e74c3c';
                            } else {
                                icon.classList.remove('fas');
                                icon.classList.add('far');
                                icon.style.color = '';
                            }
                        }
                    });
                });
            });

            // Optimize resume button
            document.querySelector('.btn-improve').addEventListener('click', function() {
                window.location.href = '/Resume/Optimize';
            });
        });
    </script>
}